<html>
<head>
<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
</head>
<body>
<div class="container">
<h3>Scade</h3>
<pre>
function vect_int_op_aff(x : int^2)
  returns (y : int^2)
let
  y = x;
tel

function vect_int_op_rev(x : int^2)
  returns (y : int^2)
let
  y = reverse x;
tel

function vect_int_op_concat(x : int^2; z : int^2)
  returns (y : int^4)
let
  y = x @ z;
tel


function vect_int_op_def(x : int; z : int)
  returns (y : int^2)
let
  y = [x, z];
tel


function vect_int_op_index(x : int^2)
  returns (y : int)
let
  y = x[0];
tel

function vect_int_op_caret(x : int)
  returns (y : int^2)
let
  y = 3^2;
tel

function vect_int_op_slice(x : int^4)
  returns (y : int^2)
let
  y = x[1..2];
tel




function vect_bool_op_aff(x : bool^2)
  returns (y : bool^2)
let
  y = x;
tel

function vect_bool_op_rev(x : bool^2)
  returns (y : bool^2)
let
  y = reverse x;
tel

function vect_bool_op_concat(x : bool^2; z : bool^2)
  returns (y : bool^4)
let
  y = x @ z;
tel


function vect_bool_op_def(x : bool; z : bool)
  returns (y : bool^2)
let
  y = [x, z];
tel


function vect_bool_op_index(x : bool^2)
  returns (y : bool)
let
  y = x[0];
tel

function vect_bool_op_caret(x : bool)
  returns (y : bool^2)
let
  y = true^2;
tel

function vect_bool_op_slice(x : bool^4)
  returns (y : bool^2)
let
  y = x[1..2];
tel



function vect_real_op_aff(x : real^2)
  returns (y : real^2)
let
  y = x;
tel

function vect_real_op_rev(x : real^2)
  returns (y : real^2)
let
  y = reverse x;
tel

function vect_real_op_concat(x : real^2; z : real^2)
  returns (y : real^4)
let
  y = x @ z;
tel


function vect_real_op_def(x : real; z : real)
  returns (y : real^2)
let
  y = [x, z];
tel


function vect_real_op_index(x : real^2)
  returns (y : real)
let
  y = x[0];
tel

function vect_real_op_caret(x : real)
  returns (y : real^2)
let
  y = 3.2^2;
tel

function vect_real_op_slice(x : real^4)
  returns (y : real^2)
let
  y = x[1..2];
tel

</pre>
<h3>XML</h3>
<pre>
&lt;?xml version=&#34;1.0&#34; encoding=&#34;ISO-8859-1&#34;?&gt;
&lt;Model&gt;
  &lt;NoExpNode scadeName=&#34;vect_int_op_aff&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_int_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_int_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_int_op_rev&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_int_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_int_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_int_op_concat&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_int_2&#34;/&gt;
    &lt;Input scadeName=&#34;z&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;z&#34; targetType=&#34;array_int_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;int^(4)&#34; targetName=&#34;y&#34; targetType=&#34;array_int_4&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_int_op_def&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;int&#34; targetName=&#34;x&#34; targetType=&#34;kcg_int&#34;/&gt;
    &lt;Input scadeName=&#34;z&#34; scadeType=&#34;int&#34; targetName=&#34;z&#34; targetType=&#34;kcg_int&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_int_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_int_op_index&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_int_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;int&#34; targetName=&#34;y&#34; targetType=&#34;kcg_int&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_int_op_caret&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;int&#34; targetName=&#34;x&#34; targetType=&#34;kcg_int&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_int_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_int_op_slice&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;int^(4)&#34; targetName=&#34;x&#34; targetType=&#34;array_int_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;int^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_int_2&#34;/&gt;
  &lt;/NoExpNode&gt;


 &lt;NoExpNode scadeName=&#34;vect_bool_op_aff&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_bool_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_bool_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_bool_op_rev&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_bool_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_bool_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_bool_op_concat&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_bool_2&#34;/&gt;
    &lt;Input scadeName=&#34;z&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;z&#34; targetType=&#34;array_bool_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;bool^(4)&#34; targetName=&#34;y&#34; targetType=&#34;array_bool_4&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_bool_op_def&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;bool&#34; targetName=&#34;x&#34; targetType=&#34;kcg_bool&#34;/&gt;
    &lt;Input scadeName=&#34;z&#34; scadeType=&#34;bool&#34; targetName=&#34;z&#34; targetType=&#34;kcg_bool&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_bool_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_bool_op_index&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_bool_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;bool&#34; targetName=&#34;y&#34; targetType=&#34;kcg_bool&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_bool_op_caret&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;bool&#34; targetName=&#34;x&#34; targetType=&#34;kcg_bool&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_bool_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_bool_op_slice&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;bool^(4)&#34; targetName=&#34;x&#34; targetType=&#34;array_bool_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;bool^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_bool_2&#34;/&gt;
  &lt;/NoExpNode&gt;

 &lt;NoExpNode scadeName=&#34;vect_real_op_aff&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_real_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_real_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_real_op_rev&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_real_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_real_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_real_op_concat&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_real_2&#34;/&gt;
    &lt;Input scadeName=&#34;z&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;z&#34; targetType=&#34;array_real_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;real^(4)&#34; targetName=&#34;y&#34; targetType=&#34;array_real_4&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_real_op_def&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;real&#34; targetName=&#34;x&#34; targetType=&#34;kcg_real&#34;/&gt;
    &lt;Input scadeName=&#34;z&#34; scadeType=&#34;real&#34; targetName=&#34;z&#34; targetType=&#34;kcg_real&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_real_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_real_op_index&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;x&#34; targetType=&#34;array_real_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;real&#34; targetName=&#34;y&#34; targetType=&#34;kcg_real&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_real_op_caret&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;real&#34; targetName=&#34;x&#34; targetType=&#34;kcg_real&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_real_2&#34;/&gt;
  &lt;/NoExpNode&gt;
  &lt;NoExpNode scadeName=&#34;vect_real_op_slice&#34;&gt;
    &lt;Input scadeName=&#34;x&#34; scadeType=&#34;real^(4)&#34; targetName=&#34;x&#34; targetType=&#34;array_real_2&#34;/&gt;
    &lt;Output scadeName=&#34;y&#34; scadeType=&#34;real^(2)&#34; targetName=&#34;y&#34; targetType=&#34;array_real_2&#34;/&gt;
  &lt;/NoExpNode&gt;

&lt;/Model&gt;

</pre>
<h3>B</h3>
<pre>
B
</pre>
</div>
</body>
</html>

